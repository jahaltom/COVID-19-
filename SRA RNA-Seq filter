import pandas as pd
from pysradb import sraweb
import json
import subprocess
import os



def get_metadata(id,list,datatype):
     #Retrieve metadata
        print(id)
        df = db.sra_metadata(id)
        ##Sometime db.sra_metadata outputs two SRR? 
        df = df.loc[df['run_accession'] == id.replace("\n", "")]             
        if df['library_layout'].str.contains('PAIRED').any():                        
               df.insert(len(df.columns),"Title",[title],True)
               df.insert(len(df.columns),"Abstract",[abstract],True)
               df.insert(len(df.columns),"LIBRARY_CONSTRUCTION_PROTOCOL",[lib_info],True)
               df.insert(len(df.columns),"DESIGN_DESCRIPTION",[design],True)
               df.insert(len(df.columns),"Study Type",[datatype],True)
               list.append(df)
        else:
            df.insert(len(df.columns),"Study Type",[datatype],True)
            single_end.append(df)
        os.remove("json_temp")


try:
    ids=open("sampleid",'r')
    ##Make a list to store metadata
    metadata_single_cell=[]
    metadata_bulk=[]
    metadata_other=[]
    single_end=[]
    ##Load SRA database
    db = sraweb.SRAweb()
    for i in ids:
        outfile=open("json_temp",'w')
        cmd=('efetch -db sra -id ' + i + ' -format native -json').replace("\n", "")
        result = subprocess.Popen(cmd, shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        out,err = result.communicate()
        out=out.decode("utf-8")
        outfile.write(out+'\n')
        outfile.close()
        with open('json_temp') as json_file:
           data = json.load(json_file)
           try:
               ##Title
               title = (data['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE']['STUDY']['DESCRIPTOR']['STUDY_TITLE'])      
           except:
               title="none"
           try:
               ##study abstract
               abstract = (data['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE']['STUDY']['DESCRIPTOR']['STUDY_ABSTRACT'])
           except:
               abstract = "none"     
           try:
               ##LIBRARY_CONSTRUCTION_PROTOCOL
               lib_info = (data['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE']['EXPERIMENT']['DESIGN']['LIBRARY_DESCRIPTOR']['LIBRARY_CONSTRUCTION_PROTOCOL'])      
           except:
               lib_info="none"
           
           design = str(data['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE']['EXPERIMENT']['DESIGN']['DESIGN_DESCRIPTION'])
           if design == "{}":
               design = "none"
             

          
           check=design+lib_info+abstract+title
           ##Single-Cell RNA-Seq     
           sc_words=["Chromium","Single Cell","single-cell","single cell","Single-cell","Single cell"]
           if any(word in check for word in sc_words):   
               get_metadata(i, metadata_single_cell, "Single-Cell RNA-Seq")
           ##Other   
           elif "BCR" in check:
               get_metadata(i, metadata_other, "Other RNA-Seq")
           
           ##Bulk RNA-Seq
           else:
                 get_metadata(i, metadata_bulk, "Bulk RNA-Seq")
                 
                 

    single_cell = pd.concat(metadata_single_cell)
    single_cell.to_csv("single_cell.metadata",mode='a', header=True)
    
    bulk = pd.concat(metadata_bulk)
    bulk.to_csv("bulk.metadata",mode='a', header=True)
    
    other = pd.concat(metadata_other)
    other.to_csv("other.metadata",mode='a', header=True)
    
    single = pd.concat(single_end)
    single.to_csv("single_end.metadata",mode='a', header=True)
except:
    single_cell = pd.concat(metadata_single_cell)
    single_cell.to_csv("single_cell.metadata",mode='a', header=True)
    
    bulk = pd.concat(metadata_bulk)
    bulk.to_csv("bulk.metadata",mode='a', header=True)
    
    other = pd.concat(metadata_other)
    other.to_csv("other.metadata",mode='a', header=True)
    
    single = pd.concat(single_end)
    single.to_csv("single_end.metadata",mode='a', header=True)
    
    



    








 snakemake -j 50 --cluster-config cluster.json --cluster "sbatch -t {cluster.time} -c 28 -N 1"

